import re

# Obfuscated code snippet
code = """
const _0x9b6fb9=_0x2ea8;(function(_0x25d2d9,_0x5e2082){const _0x469623=_0x2ea8,_0x18fcf7=_0x25d2d9();while(!![]){try{const _0x31ca8d=parseInt(_0x469623(0x17e))/0x1+parseInt(_0x469623(0x1b3))/0x2*(-parseInt(_0x469623(0x1d6))/0x3)+parseInt(_0x469623(0x1ef))/0x4*(-parseInt(_0x469623(0x1cb))/0x5)+-parseInt(_0x469623(0x19a))/0x6+-parseInt(_0x469623(0x1e3))/0x7*(-parseInt(_0x469623(0x1f0))/0x8)+parseInt(_0x469623(0x21b))/0x9*(-parseInt(_0x469623(0x1b2))/0xa)+-parseInt(_0x469623(0x1b7))/0xb*(-parseInt(_0x469623(0x1d9))/0xc);if(_0x31ca8d===_0x5e2082)break;else _0x18fcf7['push'](_0x18fcf7['shift']());}catch(_0x904758){_0x18fcf7['push'](_0x18fcf7['shift']());}}}(_0x4de7,0x9f204));
"""

# Extract all parseInt and similar expressions for evaluation
pattern = r"parseInt\([^()]+\)"
matches = re.findall(pattern, code)

matches[:10]  # Only showing the first 10 matches for brevity

